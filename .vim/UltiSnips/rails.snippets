global !p
def __camelcase__(filename):
	filename_without_leading_numbers = re.sub(r'^\d+_', r'', filename)
	underscored_name = re.sub(r'\.rb$', r'', filename_without_leading_numbers)
	titleized = underscored_name.title()
	camelcased = titleized.replace('_', '')
	return camelcased

# Examples:
#
# 'foo.rb' -> ['foo']
# 'app/rallio/foo.rb' -> ['foo']
# 'app/models/foo.rb' -> ['foo']
# 'lib/foo/csv_helpers.rb' -> ['foo', 'csv_helpers']
def __path_components__(path):
	# remove _spec.rb
	path = re.sub(r'_spec\.rb$', r'', path)

	# remove .rb extension
	path = re.sub(r'\.rb$', r'', path)

  # Remove leading app/whatever
	path = re.sub(r'^app/[a-z_]+/', r'', path)

  # Remove leading lib/
	path = re.sub(r'^lib/', r'', path)

	# Split into components
	components = path.split('/')

	return components

def __camelcase_with_module__(path):
	components = __path_components__(path)
	camelcased_components = [__camelcase__(component) for component in components]
	return '::'.join(camelcased_components)

def camelcase():
	snip.rv = __camelcase_with_module__(path)
endglobal

snippet class
class ${1:`!p camelcase() `}
	$0
end
endsnippet

snippet module
module ${1:`!p camelcase() `}
	$0
end
endsnippet

snippet model
class ${1:`!p camelcase() `} < ApplicationRecord
	$0
end
endsnippet

snippet worker
class ${1:`!p camelcase() `} < RallioWorker
	sidekiq_options queue: "${2:normal}", retry: ${3:false}
	def perform
		$0
	end
end
endsnippet

snippet controller
class ${1:`!p camelcase() `} < ApplicationController
	$0
end
endsnippet

snippet apicontroller
class Api::${1:`!p camelcase() `} < Api::ApiController
	$0
end
endsnippet

snippet policy
module Policies
	module ${1:`!p camelcase() `}
		$0
	end
end
endsnippet

snippet change_table
change_table :$1 do |t|
	$0
end
endsnippet

snippet create_table
create_table :$1 do |t|
	$0
	t.timestamps
end
endsnippet
