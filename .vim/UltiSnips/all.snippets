snippet script
#!/usr/bin/env bash

readonly ARGS="\$@"
readonly PROGDIR=\$(cd "\${0%/*}" && pwd)
readonly PROGNAME="\${0##*/}"

set -o pipefail
set -eux

cd "\${PROGDIR}/.."

endsnippet


snippet getopt
input=""
yes=0

# read the options
TEMP=\$(getopt -o i:,y --long input:,yes -- "\$@")
eval set -- "\$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "\$1" in
        -i | --input)
            input="\$2"
            shift 2
            ;;
        -y | --yes)
            yes=1
            shift 1
            ;;
        --) shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done
endsnippet


snippet longscript
#!/usr/bin/env bash

set -eu
set -o pipefail

# \$1 : (required) the executable required
has_executable() {
    command -v "\$1" >/dev/null 2>&1
}

# \$1 : (required) the name of the executable
# \$2 : (optional) the error message to print if not present
require_executable() {
    ( set +ux; set -e

      local name="\$1"
      local error_message="\$2"

      if [ -z "\$error_message" ]; then
          local error_message="ERROR: You do not have \$name installed."
      fi

      if ! has_executable "\$name"; then
          echo "\$error_message" >&2
          exit 1
      fi
    )
}

# \$1 : (required) the command to check if a package is installed
# \$2 : (required) the package name
# \$3 : (optional) the executable to test first
has_package() {
    (   set +u
        local test_command="\$1"
        local package_name="\$2"
        local executable="\$3"

        if [ ! -z "\$executable" ]; then
            has_executable "\$executable"
        else
            "\$test_command" "\$package_name" > /dev/null 2>&1
        fi
    )
}

# \$1 : (required) the package name
# \$2 : (optional) the executable to test first
has_homebrew_package() {
    has_package "brew list" "\$1" "\$2"
}

# \$1 : (required) the package name
# \$2 : (optional) the executable to test first
has_apt_package() {
    has_package "dpkg-query -W" "\$1" "\$2"
}

# Example usage:
#
#     ensure_homebrew_packages_installed "the_silver_searcher ag" "mysql mysql" "jq jq"
#
# Each first string is the package name, the second is the executable to test
# first before running expensive `brew` commands.
ensure_homebrew_packages_installed() {
    local to_install=""
    for package_and_executable in "\$@"; do
        if ! has_homebrew_package \$package_and_executable; then
            local to_install="\$to_install \${package_and_executable% *}"
        fi
    done

    if [ ! -z "\$to_install" ]; then
        echo "Installing packages: \$to_install"
        brew install \$to_install
    fi
}

# Example usage:
#
#     ensure_apt_packages_installed "the_silver_searcher ag" "mysql mysql" "jq jq"
#
# Each first string is the package name, the second is the executable to test
# first before running expensive `brew` commands.
ensure_apt_packages_installed() {
    local to_install=""
    for package_and_executable in "\$@"; do
        if ! has_apt_package \$package_and_executable; then
            local to_install="\$to_install \${package_and_executable% *}"
        fi
    done

    if [ ! -z "\$to_install" ]; then
        echo "Installing packages: \$to_install"
        sudo apt install -y \$to_install
    fi
}

operating_system() {
  local uname=\$(uname)
  if [ "\$uname" = Darwin ]; then echo osx; return; fi
  if [ ! -f /etc/os-release ]; then echo unknown; return; fi

  local name_line=\$(cat /etc/os-release | grep ^NAME=)
  if [ "\$name_line" = 'NAME="Ubuntu"' ]; then echo ubuntu; return; fi

  echo unknown
}

readonly ARGS="\$@"
readonly PROGDIR=\$(cd "\${0%/*}" && pwd)
readonly PROGNAME="\${0##*/}"

case \$(operating_system) in
    osx)
        ensure_homebrew_packages_installed "jq jq" "mysql mysql" "the_silver_searcher ag"
        ;;

    ubuntu)
        ensure_apt_packages_installed "jq jq" "mysql mysql" "silversearcher-ag ag"
        ;;

    *)
        echo "this operating system is not supported"
        ;;
esac

set -x

endsnippet


snippet rubyshell
#!/usr/bin/env ruby

require 'open3'
require 'fileutils'
require 'pathname'

def shell(*args, stdin: nil)
  stdout_result = err_result = exit_status = nil

  Open3.popen3(*args) do |i, o, err, thread|
    if stdin
      i.puts(stdin)
      i.close
    end

    stdout_result = o.read.chomp
    err_result = err.read.chomp
    exit_status = thread.value
  end

  [exit_status, stdout_result, err_result]
end

def shell_o(*args)
  shell(*args)[1]
end

def hostname
  shell_o('hostname -s')
end
endsnippet


snippet #!
#!/usr/bin/env $1

endsnippet
