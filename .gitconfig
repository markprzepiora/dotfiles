[user]
  name = Mark Przepiora
  email = mark.przepiora@gmail.com
[alias]
  co = checkout
  aa = add --all
  st = status --short
  ci = commit
  dc = diff --cached
  di = diff
  pullff = pull --ff-only
  pf = push --force

  # git h = head
  head = !git l -1
  h = !git head
  # git hp = head with patch
  hp = "!. ~/.githelpers && show_git_head"
  # git r = recent commits, only current branch
  # git ra = recent commits, all reachable refs
  r = !git l -30
  ra = !git r --all
  # git l = all commits, only current branch
  # git la = all commits, all reachable refs
  l = "!. ~/.githelpers && pretty_git_log"
  la = !git l --all
  lac = "!. ~/.githelpers && pretty_git_log2"
  # git tl = (flat) all commits, only current branch
  # git tr = (flat) recent commits, only current branch
  tl = "!. ~/.githelpers && pretty_git_topo_log"
  tr = !git tl -30
  # git pb = branches
  pb = "!. ~/.githelpers && pretty_git_branches"
  # git trr = (flat) recent commits, current branch, reverse order, no refs
  trr = "!. ~/.githelpers && pretty_git_topo_log_no_branch_names --reverse -10 --topo-order"

  # What commits will be merged? Intended to be used from e.g. `develop` (or
  # whatever branch the feature branch will be merged INTO).
  #
  # Usage:
  #
  #     git branch-commits FEATURE_BRANCH [HEAD]
  #
  # Example:
  #
  #     git branch-commits some-feature-branch develop
  branch-commits = "!. ~/.githelpers && branch_commits_range_from_head"

  branch-files = "!. ~/.githelpers && files_in_branch"
  modified = "! git status --porcelain | grep -Ev '^\\?\\?' | cut -c4-"
  conflicts = "! git status --short | grep -E '^UU' | cut -c4-"

  # show only the filenames changed in a given commit (default HEAD)
  show-names = show --name-only --pretty=

  # list untracked files
  untracked = ls-files --exclude-standard --others

  # list ignored files
  ignored = ls-files --ignored --exclude-standard --others

  lg = log --color --graph --pretty=format:'%Cred%h %Cgreen(%ci)%Creset%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset' --abbrev-commit

  # When in another branch, run `git oldest-ancestor` to see where the current
  # head diverged from master. You can explicitly specify the compared branches,
  # e.g. the default is `git oldest-ancestor master HEAD`
  oldest-ancestor = !zsh -c 'diff -u <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | sed -ne \"s/^ //p\" | head -1' -

[core]
  editor = vi
  excludesfile = ~/dotfiles/.gitignore
  pager = ~/dotfiles/bin/diff-so-fancy | less --tabs=4 -RFX
[color]
  ui = true
[push]
  default = simple
[oh-my-zsh]
	# disable showing dirty status in zsh prompt since this can be quite slow in
	# slow filesystems (like WSL)
	hide-dirty = 1
[init]
	defaultBranch = main
